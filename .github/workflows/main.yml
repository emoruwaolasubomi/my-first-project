# Name of your workflow
name: CI/CD Docker Pipeline

# 1. Trigger: When does this workflow run?
on:
  push:
    branches: [ "master" ] # Runs on pushes to the main branch
  workflow_dispatch: # Allows manual triggering from the Actions tab


# 2. Jobs: What tasks should be performed?
jobs:

  test:
    runs-on : ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt

      - name: Run tests
        run: pytest

  
  build-and-push:
    # 3. Runner: What machine will this run on?
    needs: test
    runs-on: ubuntu-latest

    # 4. Steps: The sequence of actions to perform
    steps:
      # Checks out your repository's code so the job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Logs into Docker Hub using the secrets you stored
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # This is the main action that builds the Docker image from your Dockerfile
      # and pushes it to your Docker Hub repository
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-python-app:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: SSH and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my-python-app:latest
            docker stop my-python-app || true
            docker rm my-python-app || true
            docker run -d --name my-python-app -p 80:80 ${{ secrets.DOCKERHUB_USERNAME }}/my-python-app:latest